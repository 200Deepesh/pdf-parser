/**
 * Extract keywords and key phrases.
 *
 * The results are stored on `file.data.keyphrases` and  `file.data.keywords`.
 *
 * @param {Readonly<Options> | null | undefined} [options]
 *   Configuration (optional).
 * @returns
 *   Transform.
 */
export default function retextKeywords(options?: Readonly<Options> | null | undefined): (tree: Root, file: VFile) => undefined;
/**
 * Info on a key phrase.
 */
export type Keyphrase = {
    /**
     *   All matches.
     */
    matches: Array<PhraseMatch>;
    /**
     *   Score of phrase, for one match.
     */
    score: number;
    /**
     *   Stems of phrase.
     */
    stems: Array<string>;
    /**
     *   Score of phrase, for all matches.
     */
    weight: number;
};
/**
 * Info on a keyword.
 */
export type Keyword = {
    /**
     *   All matches.
     */
    matches: Array<WordMatch>;
    /**
     *   score of word, for all matches.
     */
    score: number;
    /**
     *   Stem of word.
     */
    stem: string;
};
/**
 * Configuration.
 */
export type Options = {
    /**
     * Try to detect at most `maximum` words and phrases (default: `5`);
     * actual counts may differ, for example, when two words have the same score,
     * both will be returned; when too few words exist, less will be returned.
     */
    maximum?: number | null | undefined;
};
/**
 * Match.
 */
export type PhraseMatch = {
    /**
     *   Matched nodes.
     */
    nodes: Array<SentenceContent>;
    /**
     *   Parent.
     */
    parent: Sentence;
};
/**
 * Match.
 */
export type WordMatch = {
    /**
     *   Matched node.
     */
    node: Word;
    /**
     *   Index of `node` in `parent`.
     */
    index: number;
    /**
     *   Parent.
     */
    parent: Sentence;
};
import type { Root } from 'nlcst';
import type { VFile } from 'vfile';
import type { SentenceContent } from 'nlcst';
import type { Sentence } from 'nlcst';
import type { Word } from 'nlcst';
//# sourceMappingURL=index.d.ts.map